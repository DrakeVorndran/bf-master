{"version":3,"sources":["components/cell/index.js","pages/home/index.js","App.js","serviceWorker.js","index.js"],"names":["Cell","value","pointer","className","Home","props","state","code","delay","memory","stepPointer","output","inputNeeded","inputVal","this","setState","val","step","length","setTimeout","run","bind","e","preventDefault","charCodeAt","slice","indexOf","split","reverse","push","unshift","actions","String","fromCharCode","bumpLeft","bumpRight","console","log","reset","placeholder","onChange","target","onClick","map","i","key","onSubmit","setInput","type","Component","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c219a5c7.chunk.js","sourcesContent":["import React from 'react'\nimport \"./styles.css\"\n\nexport default function Cell({value, pointer}) {\n  return (\n    <div className={`cell ${pointer? \"pointer\" : \"\"}`}>\n      <p>{value}</p>\n    </div>\n  )\n}","import React, { Component } from 'react'\nimport \"./styles.css\"\n\n\nimport Cell from \"../../components/cell\"\n\n\nexport default class Home extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      code: \"\",\n      delay: 50,\n      memory: [0, 0, 0, 0, 0],\n      pointer: 0,\n      stepPointer: 0,\n      output: \"\",\n      inputNeeded: false,\n      inputVal: \"\",\n    }\n  }\n\n  reset() {\n    this.setState({\n      memory: [0,0,0,0,0],\n      pointer: 0,\n      stepPointer: 0,\n      output: \"\",\n    })\n  }\n\n  output(val) {\n    let { output } = this.state\n    output += val\n    this.setState({ output })\n  }\n\n  run() {\n    const { stepPointer, code, delay, inputNeeded } = this.state\n    if (!inputNeeded) {\n      this.step()\n    }\n    if (stepPointer !== code.length - 1 && !inputNeeded) {\n      setTimeout(this.run.bind(this), delay)\n    }\n  }\n\n  setInput(e) {\n    e.preventDefault()\n    let { memory } = this.state\n    const { pointer, inputVal } = this.state\n    memory[pointer] = inputVal.charCodeAt(0)\n    this.setState({ inputNeeded: false, memory, inputVal: \"\" })\n    this.run()\n  }\n\n\n  bumpLeft() {\n    let { pointer, stepPointer } = this.state\n    const { code, memory } = this.state\n    if (memory[pointer] === 0) {\n      stepPointer = code.slice(stepPointer).indexOf(\"]\") + stepPointer\n    }\n\n    return stepPointer\n\n  }\n\n  bumpRight() {\n    let { pointer, stepPointer } = this.state\n    const { code, memory } = this.state\n    if (memory[pointer] !== 0) {\n      stepPointer = code.slice(0, stepPointer).length - code.slice(0, stepPointer).split(\"\").reverse().indexOf(\"[\") - 1\n    }\n    return stepPointer\n\n  }\n  step() {\n    const { code } = this.state\n    let { memory, pointer, stepPointer, inputNeeded } = this.state\n    if (stepPointer === code.length) {\n      this.reset()\n      return\n    }\n    if (pointer >= memory.length) {\n      memory.push(0)\n    }\n    if (pointer < 0) {\n      memory.unshift(0)\n      pointer += 1\n    }\n    const actions = {\n      \"+\": () => memory[pointer] += 1,\n      \"-\": () => memory[pointer] -= 1,\n      \">\": () => pointer += 1,\n      \"<\": () => pointer -= 1,\n      \".\": () => this.output(String.fromCharCode(memory[pointer])),\n      \",\": () => inputNeeded = true,\n      \"[\": () => stepPointer = this.bumpLeft(),\n      \"]\": () => stepPointer = this.bumpRight(),\n    }\n    if (code[stepPointer] in actions) {\n      actions[code[stepPointer]]()\n    }\n    console.log(stepPointer)\n\n    this.setState({ memory, pointer, stepPointer: stepPointer + 1, inputNeeded })\n  }\n\n  render() {\n    const { memory, code, pointer, output, inputNeeded, inputVal } = this.state\n    return (\n      <>\n        <h1>BF Master</h1>\n        <div className=\"home\">\n          <div className=\"code\">\n            <h3>Code</h3>\n\n            <textarea placeholder=\"bf code\" value={code} onChange={(e) => this.setState({ code: e.target.value })} />\n          </div>\n\n          <div className=\"output\">\n            <h3>Output</h3>\n            <p>{output}</p>\n          </div>\n          <div className=\"memory\">\n            <div className=\"control\">\n              <h1>Control Panel</h1>\n              <button onClick={() => this.run()}>Run</button>\n              <button onClick={() => this.step()}>Step</button>\n              <button>Step Back</button>\n            </div>\n            <h3>Memory</h3>\n            <div className=\"cells\">\n              {memory.map((value, i) => <Cell pointer={pointer == i} key={`${i}-${value}`} value={value} />)}\n            </div>\n          </div>\n          {inputNeeded &&\n            <div className=\"input-box\">\n              <h3>Input Needed!</h3>\n              <form onSubmit={(e) => this.setInput(e)}>\n                <input type=\"text\" value={inputVal} onChange={(e) => this.setState({ inputVal: e.target.value.split(\"\")[e.target.value.length - 1] })} />\n                <button type=\"submit\" >Do stuff</button>\n              </form>\n            </div>\n          }\n        </div>\n\n      </>\n    )\n  }\n}","import React from 'react';\nimport \"./App.css\"\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\n\nimport Home from \"./pages/home\"\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n      <Route path=\"/\" component={Home} />\n      </div>\n    </Router> \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}